name: Test_workflow
on: 
  push:
    branches:
      - workflow
jobs:
  Code_Analysis_Job:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - run: |
          echo "GO_VERSION=$(cat .go-version)" >> $GITHUB_ENV
          echo "SDK_VERSION=$(cat .sdk-version)" >> $GITHUB_ENV
          echo "CURRENT_TIME=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV
          echo "COMMIT_ID=$(git rev-parse --short "$GITHUB_SHA")" >> $GITHUB_ENV
      - run: echo "RELEASE_VERSION=${{ env.SDK_VERSION }}.${{ env.CURRENT_TIME }}.${{ env.COMMIT_ID }}" >> $GITHUB_ENV
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - run: go generate ./version
      - run: echo $(cat ./version/version_gen.go)
      - run: echo ${{ env.COMMIT_ID }}
      - name: setup git config
        run: |
          # setup the username and email. I tend to use 'GitHub Actions Bot' with no email by default
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"

      - name: commit
        run: |
          # Stage the file, commit and push
          git add version/version_gen.go
          git commit -m "version updated"
          echo $(git rev-parse  "$GITHUB_SHA")
          echo $(git rev-parse HEAD)
          git tag ${{ env.RELEASE_VERSION }}
          git push origin ${{ env.RELEASE_VERSION }}
      - run: echo $(git rev-parse --short "$GITHUB_SHA")
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with: 
          args: -v --config=./.github/config/linter.yml
